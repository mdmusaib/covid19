{"version":3,"sources":["components/navbar.js","utils/common-functions.js","components/row.js","components/table.js","components/stateLevel.js","components/level.js","constants.js","components/choropleth.js","components/mapexplorer.js","components/home.js","components/stateTable.js","components/StateWisePage.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","months","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","today","Date","setHours","dataTypes","filter","d","every","dt","date","Number","getFullYear","Row","props","useState","state","setState","districts","setDistricts","sortedDistricts","setSortedDistricts","sortColumn","localStorage","getItem","isAscending","sortData","setSortData","useEffect","handleReveal","sortDistricts","useCallback","aDistricts","sorted","Object","keys","sort","district1","district2","value1","parseInt","confirmed","value2","comparisonValue","forEach","key","handleSort","column","setItem","Fragment","className","total","onMouseEnter","onHighlightState","index","onMouseLeave","touchstart","onClick","style","background","fontWeight","reveal","display","color","deltaconfirmed","active","recovered","deltarecovered","deaths","deltadeaths","colSpan","title","isNaN","parse","lastupdatedtime","formatDistance","e","window","innerWidth","district","toLowerCase","map","onHighlightDistrict","delta","Unknown","Table","states","setStates","revealedStates","setRevealedStates","count","setCount","summary","reduce","a","length","s","stateDistrictWiseData","currentsortColumn","currentTarget","querySelector","getAttribute","totalRow","splice","StateData1","StateData2","unshift","doSort","animationDelay","width","districtData","StateWiseLevel","setData","setConfirmed","setActive","recoveries","setRecoveries","setDeaths","setDeltas","deltas","parseData","id","Level","MAP_TYPES","propertyFieldMap","country","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","selectedRegion","choroplethMap","useRef","svgRenderCount","setSvgRenderCount","ready","geoData","d3","remove","propertyField","mapType","svg","current","attr","height","topology","topojson","objects","graphObjectName","projection","fitSize","fitExtent","path","onceTouchedRegion","append","selectAll","features","enter","n","properties","maxConfirmed","on","name","err","console","log","handleMouseover","target","parentNode","appendChild","text","value","parseFloat","toFixed","toString","toTitleCase","str","split","i","charAt","toUpperCase","join","renderData","cells","label","domain","genLength","generatedLabels","labelDelimiter","Math","floor","n1","n2","Array","from","legendLinear","legendColor","shapeWidth","shapeHeight","titleWidth","labels","orient","scale","select","call","geoDataFile","prevCount","classed","nodes","viewBox","preserveAspectRatio","ref","India","Assam","Bihar","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","regionHighlighted","setSelectedRegion","currentHoveredRegion","setCurrentHoveredRegion","currentMap","setCurrentMap","region","getRegionFromState","useMemo","currentMapData","acc","districtWiseData","getRegionFromDistrict","undefined","newMap","switchMapToState","topDistrict","b","marginTop","Home","selectedState","setSelectedState","setStateDistrictWiseData","fetched","setFetched","lastUpdated","setLastUpdated","setTimeseries","setActivityLog","setRegionHighlighted","getStates","Promise","all","axios","get","response","stateDistrictWiseResponse","updateLogResponse","statewise","statecode","cases_time_series","StateWiseTable","StateWisePage","history","require","createBrowserHistory","App","pages","pageLink","view","displayName","animationDelayForNavbar","StateWiseComponent","render","location","exact","to","page","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51c17a7c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  const [menuVisible, setMenuVisible] = useState(false);\r\n\r\n  // HTML Properties for each of the links in UI\r\n  const navLinkProps = (path, animationDelay) => ({\r\n    className: `fadeInUp ${window.location.pathname === path ? 'focused' : ''}`,\r\n    style: {\r\n      animationDelay: `${animationDelay}s`,\r\n    },\r\n  });\r\n\r\n  if (window.location.pathname !== '/summary') {\r\n    return (\r\n      <div\r\n        className=\"Navbar\"\r\n        style={{\r\n          animationDelay: '0.5s',\r\n          transition: 'all 0.3s ease-in-out',\r\n        }}\r\n      >\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"fadeInUp logo\"\r\n            alt=\"India COVID-19 Tracker\"\r\n            src=\"/icon.png\"\r\n            style={{\r\n              animationDelay: '0.0s',\r\n              transition: 'all 0.3s ease-in-out',\r\n            }}\r\n          />\r\n        </Link>\r\n\r\n        <div className=\"navbar-left\">\r\n          <div className={`navbar-menu ${!menuVisible ? 'hidden' : ''}`}>\r\n            {props.pages.map((page, i) => {\r\n              return (\r\n                <Link\r\n                  onClick={() => setMenuVisible(false)}\r\n                  to={page.pageLink}\r\n                  key={i}\r\n                >\r\n                  <span\r\n                    {...navLinkProps(\r\n                      page.pageLink,\r\n                      page.animationDelayForNavbar\r\n                    )}\r\n                  >\r\n                    {page.displayName}\r\n                  </span>\r\n                </Link>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"navbar-right\">\r\n          <div\r\n            className=\"navbar-toggle\"\r\n            onClick={() => {\r\n              setMenuVisible(!menuVisible);\r\n            }}\r\n          >\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n}\r\n\r\nexport default Navbar;","const months = {\r\n  '01': 'Jan',\r\n  '02': 'Feb',\r\n  '03': 'Mar',\r\n  '04': 'Apr',\r\n  '05': 'May',\r\n  '06': 'Jun',\r\n  '07': 'Jul',\r\n  '08': 'Aug',\r\n  '09': 'Sep',\r\n  '10': 'Oct',\r\n  '11': 'Nov',\r\n  '12': 'Dec',\r\n};\r\n\r\nconst stateCodes = {\r\n  AP: 'Andhra Pradesh',\r\n  AR: 'Arunachal Pradesh',\r\n  AS: 'Assam',\r\n  BR: 'Bihar',\r\n  CT: 'Chhattisgarh',\r\n  GA: 'Goa',\r\n  GJ: 'Gujarat',\r\n  HR: 'Haryana',\r\n  HP: 'Himachal Pradesh',\r\n  JH: 'Jharkhand',\r\n  KA: 'Karnataka',\r\n  KL: 'Kerala',\r\n  MP: 'Madhya Pradesh',\r\n  MH: 'Maharashtra',\r\n  MN: 'Manipur',\r\n  ML: 'Meghalaya',\r\n  MZ: 'Mizoram',\r\n  NL: 'Nagaland',\r\n  OR: 'Odisha',\r\n  PB: 'Punjab',\r\n  RJ: 'Rajasthan',\r\n  SK: 'Sikkim',\r\n  TN: 'Tamil Nadu',\r\n  TG: 'Telangana',\r\n  TR: 'Tripura',\r\n  UT: 'Uttarakhand',\r\n  UP: 'Uttar Pradesh',\r\n  WB: 'West Bengal',\r\n  AN: 'Andaman and Nicobar Islands',\r\n  CH: 'Chandigarh',\r\n  DB: 'Dadra and Nagar Haveli',\r\n  DD: 'Daman and Diu',\r\n  DL: 'Delhi',\r\n  JK: 'Jammu and Kashmir',\r\n  LA: 'Ladakh',\r\n  LD: 'Lakshadweep',\r\n  PY: 'Puducherry',\r\n};\r\n\r\nexport const getStateName = (code) => {\r\n  return stateCodes[code.toUpperCase()];\r\n};\r\n\r\nexport const formatDate = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const year = unformattedDate.slice(6, 10);\r\n  const time = unformattedDate.slice(11);\r\n  return `${year}-${month}-${day}T${time}+05:30`;\r\n};\r\n\r\nexport const formatDateAbsolute = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const time = unformattedDate.slice(11);\r\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\r\n};\r\n\r\nexport const validateCTS = (data = []) => {\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  const dataTypes = [\r\n    'dailyconfirmed',\r\n    'dailydeceased',\r\n    'dailyrecovered',\r\n    'totalconfirmed',\r\n    'totaldeceased',\r\n    'totalrecovered',\r\n  ];\r\n  return data\r\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\r\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\r\n    .filter((d) => {\r\n      const year = today.getFullYear();\r\n      return new Date(d.date + year) < today;\r\n    });\r\n};\r\n\r\nexport const preprocessTimeseries = (timeseries) => {\r\n  return timeseries.map((stat) => ({\r\n    date: new Date(stat.date + ' 2020'),\r\n    totalconfirmed: +stat.totalconfirmed,\r\n    totalrecovered: +stat.totalrecovered,\r\n    totaldeceased: +stat.totaldeceased,\r\n    dailyconfirmed: +stat.dailyconfirmed,\r\n    dailyrecovered: +stat.dailyrecovered,\r\n    dailydeceased: +stat.dailydeceased,\r\n  }));\r\n};\r\n\r\n/**\r\n * Returns the last `days` entries\r\n * @param {Array<Object>} timeseries\r\n * @param {number} days\r\n *\r\n * @return {Array<Object>}\r\n */\r\nexport function sliceTimeseriesFromEnd(timeseries, days) {\r\n  return timeseries.slice(timeseries.length - days);\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport * as Icon from 'react-feather';\r\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\r\nimport {formatDistance} from 'date-fns';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Row(props) {\r\n  const [state, setState] = useState(props.state);\r\n  const [districts, setDistricts] = useState(props.districts);\r\n  const [sortedDistricts, setSortedDistricts] = useState(props.districts);\r\n  const [sortData, setSortData] = useState({\r\n    sortColumn: localStorage.getItem('district.sortColumn')\r\n      ? localStorage.getItem('district.sortColumn')\r\n      : 'confirmed',\r\n    isAscending: localStorage.getItem('district.isAscending')\r\n      ? localStorage.getItem('district.isAscending') === 'true'\r\n      : false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState(props.state);\r\n  }, [props.state]);\r\n\r\n  useEffect(() => {\r\n    setDistricts(props.districts);\r\n    setSortedDistricts(props.districts);\r\n  }, [props.districts]);\r\n\r\n  const handleReveal = () => {\r\n    props.handleReveal(props.state.state);\r\n  };\r\n\r\n  const sortDistricts = useCallback(\r\n    (aDistricts) => {\r\n      const sorted = {};\r\n      if (aDistricts) {\r\n        Object.keys(aDistricts)\r\n          .sort((district1, district2) => {\r\n            const sortColumn = sortData.sortColumn;\r\n            const value1 =\r\n              sortColumn === 'district'\r\n                ? district1\r\n                : parseInt(aDistricts[district1].confirmed);\r\n            const value2 =\r\n              sortColumn === 'district'\r\n                ? district2\r\n                : parseInt(aDistricts[district2].confirmed);\r\n            const comparisonValue =\r\n              value1 > value2\r\n                ? 1\r\n                : value1 === value2 && district1 > district2\r\n                ? 1\r\n                : -1;\r\n            return sortData.isAscending\r\n              ? comparisonValue\r\n              : comparisonValue * -1;\r\n          })\r\n          .forEach((key) => {\r\n            sorted[key] = aDistricts[key];\r\n          });\r\n        setSortedDistricts(sorted);\r\n      }\r\n    },\r\n    [sortData.isAscending, sortData.sortColumn]\r\n  );\r\n\r\n  const handleSort = (column) => {\r\n    const isAscending =\r\n      sortData.sortColumn === column\r\n        ? !sortData.isAscending\r\n        : sortData.sortColumn === 'district';\r\n    setSortData({\r\n      sortColumn: column,\r\n      isAscending: isAscending,\r\n    });\r\n    localStorage.setItem('district.sortColumn', column);\r\n    localStorage.setItem('district.isAscending', isAscending);\r\n  };\r\n\r\n  useEffect(() => {\r\n    sortDistricts(districts);\r\n  }, [districts, sortData, sortDistricts]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <tr\r\n        className={props.total ? 'state is-total' : 'state'}\r\n        onMouseEnter={() => props.onHighlightState?.(state, props.index)}\r\n        onMouseLeave={() => props.onHighlightState?.()}\r\n        touchstart={() => props.onHighlightState?.(state, props.index)}\r\n        onClick={!props.total ? handleReveal : null}\r\n        style={{background: props.index % 2 === 0 ? '#f8f9fa' : ''}}\r\n      >\r\n        <td style={{fontWeight: 600}}>\r\n          <div className=\"table__title-wrapper\">\r\n            <span\r\n              className={`dropdown ${\r\n                props.reveal ? 'rotateRightDown' : 'rotateDownRight'\r\n              }`}\r\n              style={{display: !props.total ? '' : 'none'}}\r\n              onClick={() => {\r\n                handleReveal();\r\n              }}\r\n            >\r\n              <Icon.ChevronDown />\r\n            </span>\r\n            {state.state}\r\n            {state.state === 'West Bengal'}\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <span className=\"deltas\" style={{color: '#ff073a'}}>\r\n            {state.deltaconfirmed > 0 && <Icon.ArrowUp />}\r\n            {state.deltaconfirmed > 0 ? `${state.deltaconfirmed}` : ''}\r\n          </span>\r\n          <span className=\"table__count-text\">\r\n            {parseInt(state.confirmed) === 0 ? '-' : state.confirmed}\r\n          </span>\r\n        </td>\r\n        <td\r\n          style={{color: parseInt(state.active) === 0 ? '#B5B5B5' : 'inherit'}}\r\n        >\r\n          {/* <span className=\"deltas\" style={{color: '#007bff'}}>\r\n            {!state.delta.active==0 && <Icon.ArrowUp/>}\r\n            {state.delta.active>0 ? `${state.delta.active}` : ''}\r\n          </span>*/}\r\n          {parseInt(state.active) === 0 ? '-' : state.active}\r\n        </td>\r\n        <td\r\n          style={{\r\n            color: parseInt(state.recovered) === 0 ? '#B5B5B5' : 'inherit',\r\n          }}\r\n        >\r\n          <span className=\"deltas\" style={{color: '#28a745'}}>\r\n            {state.deltarecovered > 0 && <Icon.ArrowUp />}\r\n            {state.deltarecovered > 0 ? `${state.deltarecovered}` : ''}\r\n          </span>\r\n          <span className=\"table__count-text\">\r\n            {parseInt(state.recovered) === 0 ? '-' : state.recovered}\r\n          </span>\r\n        </td>\r\n        <td\r\n          style={{color: parseInt(state.deaths) === 0 ? '#B5B5B5' : 'inherit'}}\r\n        >\r\n          <span className=\"deltas\" style={{color: '#6c757d'}}>\r\n            {state.deltadeaths > 0 && <Icon.ArrowUp />}\r\n            {state.deltadeaths > 0 ? `${state.deltadeaths}` : ''}\r\n          </span>\r\n          <span className=\"table__count-text\">\r\n            {parseInt(state.deaths) === 0 ? '-' : state.deaths}\r\n          </span>\r\n        </td>\r\n      </tr>\r\n\r\n      <tr\r\n        className={'state-last-update'}\r\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\r\n      >\r\n        <td colSpan={2}>\r\n          <div className=\"last-update\">\r\n            <h6>Last Updated&nbsp;</h6>\r\n            <h6\r\n              title={\r\n                isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\r\n                  ? ''\r\n                  : formatDateAbsolute(props.state.lastupdatedtime)\r\n              }\r\n            >\r\n              {isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\r\n                ? ''\r\n                : `${formatDistance(\r\n                    new Date(formatDate(props.state.lastupdatedtime)),\r\n                    new Date()\r\n                  )} Ago`}\r\n            </h6>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n\r\n      <tr\r\n        className={`district-heading`}\r\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\r\n      >\r\n        <td onClick={(e) => handleSort('district')}>\r\n          <div className=\"heading-content\">\r\n            <abbr title=\"District\">District</abbr>\r\n            <div\r\n              style={{\r\n                display:\r\n                  sortData.sortColumn === 'district' ? 'initial' : 'none',\r\n              }}\r\n            >\r\n              {sortData.isAscending ? (\r\n                <div className=\"arrow-up\" />\r\n              ) : (\r\n                <div className=\"arrow-down\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </td>\r\n        <td onClick={(e) => handleSort('confirmed')}>\r\n          <div className=\"heading-content\">\r\n            <abbr\r\n              className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\r\n              title=\"Confirmed\"\r\n            >\r\n              {window.innerWidth <= 769\r\n                ? window.innerWidth <= 375\r\n                  ? 'C'\r\n                  : 'Cnfmd'\r\n                : 'Confirmed'}\r\n            </abbr>\r\n            <div\r\n              style={{\r\n                display:\r\n                  sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\r\n              }}\r\n            >\r\n              {sortData.isAscending ? (\r\n                <div className=\"arrow-up\" />\r\n              ) : (\r\n                <div className=\"arrow-down\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n\r\n      {sortedDistricts &&\r\n        Object.keys(sortedDistricts)\r\n          .filter((district) => district.toLowerCase() !== 'unknown')\r\n          .map((district, index) => {\r\n            if (district.toLowerCase() !== 'unknown') {\r\n              return (\r\n                <tr\r\n                  key={index}\r\n                  className={`district`}\r\n                  style={{\r\n                    display: props.reveal && !props.total ? '' : 'none',\r\n                    background: index % 2 === 0 ? '#f8f9fa' : '',\r\n                  }}\r\n                  onMouseEnter={() =>\r\n                    props.onHighlightDistrict?.(district, state, props.index)\r\n                  }\r\n                  onMouseLeave={() => props.onHighlightDistrict?.()}\r\n                  touchstart={() =>\r\n                    props.onHighlightDistrict?.(district, state, props.index)\r\n                  }\r\n                >\r\n                  <td style={{fontWeight: 600}}>{district}</td>\r\n                  <td>\r\n                    <span className=\"deltas\" style={{color: '#ff073a'}}>\r\n                      {sortedDistricts[district].delta.confirmed > 0 && (\r\n                        <Icon.ArrowUp />\r\n                      )}\r\n                      {sortedDistricts[district].delta.confirmed > 0\r\n                        ? `${sortedDistricts[district].delta.confirmed}`\r\n                        : ''}\r\n                    </span>\r\n                    <span className=\"table__count-text\">\r\n                      {sortedDistricts[district].confirmed}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n\r\n      {sortedDistricts?.Unknown && (\r\n        <tr\r\n          className={`district`}\r\n          style={{display: props.reveal && !props.total ? '' : 'none'}}\r\n        >\r\n          <td style={{fontWeight: 600}}>Unknown</td>\r\n          <td>\r\n            <span className=\"deltas\" style={{color: '#ff073a'}}>\r\n              {sortedDistricts['Unknown'].delta.confirmed > 0 && (\r\n                <Icon.ArrowUp />\r\n              )}\r\n              {sortedDistricts['Unknown'].delta.confirmed > 0\r\n                ? `${sortedDistricts['Unknown'].delta.confirmed}`\r\n                : ''}\r\n            </span>\r\n            <span className=\"table__count-text\">\r\n              {sortedDistricts['Unknown'].confirmed}\r\n            </span>\r\n          </td>\r\n        </tr>\r\n      )}\r\n\r\n      <tr\r\n        className={`spacer`}\r\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\r\n      >\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      </tr>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Row from './row';\r\n\r\nfunction Table(props) {\r\n  const [states, setStates] = useState(props.states);\r\n  const [revealedStates, setRevealedStates] = useState({});\r\n  const [districts, setDistricts] = useState({});\r\n  const [count, setCount] = useState(0);\r\n  const [sortData, setSortData] = useState({\r\n    sortColumn: localStorage.getItem('state.sortColumn')\r\n      ? localStorage.getItem('state.sortColumn')\r\n      : 'confirmed',\r\n    isAscending: localStorage.getItem('state.isAscending')\r\n      ? localStorage.getItem('state.isAscending') === 'true'\r\n      : false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.summary === true) {\r\n      \r\n      setStates(props.states.slice(0, 9));\r\n    } else {\r\n      setStates(props.states);\r\n    }\r\n  }, [props.states, props.summary]);\r\n\r\n  useEffect(() => {\r\n    if (props.states[0]) {\r\n      setRevealedStates(\r\n        props.states.reduce((a, state) => {\r\n          return {...a, [state.state]: false};\r\n        }, {})\r\n      );\r\n    }\r\n  }, [props.states]);\r\n\r\n  useEffect(() => {\r\n    if (states.length > 0) {\r\n      // slice to ignore the first item which is the total count\r\n      setCount(states.slice(1).filter((s) => s && s.confirmed > 0).length);\r\n    }\r\n  }, [states]);\r\n\r\n  useEffect(() => {\r\n    setDistricts(props.stateDistrictWiseData);\r\n  }, [props.stateDistrictWiseData]);\r\n\r\n  const doSort = (e, props) => {\r\n    const totalRow = states.splice(0, 1);\r\n    states.sort((StateData1, StateData2) => {\r\n      const sortColumn = sortData.sortColumn;\r\n      let value1 = StateData1[sortColumn];\r\n      let value2 = StateData2[sortColumn];\r\n\r\n      if (sortColumn !== 'state') {\r\n        value1 = parseInt(StateData1[sortColumn]);\r\n        value2 = parseInt(StateData2[sortColumn]);\r\n      }\r\n\r\n      if (sortData.isAscending) {\r\n        return value1 > value2\r\n          ? 1\r\n          : value1 === value2 && StateData1['state'] > StateData2['state']\r\n          ? 1\r\n          : -1;\r\n      } else {\r\n        return value1 < value2\r\n          ? 1\r\n          : value1 === value2 && StateData1['state'] > StateData2['state']\r\n          ? 1\r\n          : -1;\r\n      }\r\n    });\r\n    states.unshift(totalRow[0]);\r\n  };\r\n\r\n  const handleSort = (e, props) => {\r\n    const currentsortColumn = e.currentTarget\r\n      .querySelector('abbr')\r\n      .getAttribute('title')\r\n      .toLowerCase();\r\n    const isAscending =\r\n      sortData.sortColumn === currentsortColumn\r\n        ? !sortData.isAscending\r\n        : sortData.sortColumn === 'state';\r\n    setSortData({\r\n      sortColumn: currentsortColumn,\r\n      isAscending: isAscending,\r\n    });\r\n    localStorage.setItem('state.sortColumn', currentsortColumn);\r\n    localStorage.setItem('state.isAscending', isAscending);\r\n  };\r\n\r\n  const handleReveal = (state) => {\r\n    setRevealedStates({\r\n      ...revealedStates,\r\n      [state]: !revealedStates[state],\r\n    });\r\n  };\r\n\r\n  doSort();\r\n\r\n  return (\r\n    <React.Fragment>\r\n         \r\n      <table className=\"table fadeInUp\" style={{animationDelay: '1.8s',width:'100%'}}>\r\n      \r\n        <thead>\r\n          <tr>\r\n            <th\r\n              className=\"sticky state-heading\"\r\n              onClick={(e) => handleSort(e, props)}\r\n            >\r\n              <div className=\"heading-content\">\r\n                <abbr title=\"State\">State/UT</abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'state' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\r\n                  title=\"Confirmed\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'C'\r\n                      : 'Cnfmd'\r\n                    : 'Confirmed'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-blue' : ''}`}\r\n                  title=\"Active\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'A'\r\n                      : 'Actv'\r\n                    : 'Active'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'active' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-green' : ''}`}\r\n                  title=\"Recovered\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'R'\r\n                      : 'Rcvrd'\r\n                    : 'Recovered'}\r\n                </abbr>\r\n                <div\r\n                  className={\r\n                    sortData.sortColumn === 'recovered' ? 'sort-black' : ''\r\n                  }\r\n                ></div>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'recovered' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-gray' : ''}`}\r\n                  title=\"Deaths\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'D'\r\n                      : 'Dcsd'\r\n                    : 'Deceased'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'deaths' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {states.map((state, index) => {\r\n            if (index !== 0 && state.confirmed > 0) {\r\n              return (\r\n                <Row\r\n                  key={index}\r\n                  index={index}\r\n                  state={state}\r\n                  total={false}\r\n                  reveal={revealedStates[state.state]}\r\n                  districts={\r\n                    state.state in districts\r\n                      ? districts[state.state].districtData\r\n                      : []\r\n                  }\r\n                  onHighlightState={props.onHighlightState}\r\n                  onHighlightDistrict={props.onHighlightDistrict}\r\n                  handleReveal={handleReveal}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </tbody>\r\n\r\n        <tbody>\r\n          {states.length > 1 && props.summary === false && (\r\n            <Row key={0} state={states[0]} total={true} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\r\n        {count} States/UTS Affected\r\n      </h5>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nfunction StateWiseLevel(props) {\r\n  const [data, setData] = useState(props.data);\r\n  const [confirmed, setConfirmed] = useState(0);\r\n  const [active, setActive] = useState(0);\r\n  const [recoveries, setRecoveries] = useState(0);\r\n  const [deaths, setDeaths] = useState(0);\r\n  const [deltas, setDeltas] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setData(props.data);\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    const parseData = () => {\r\n      let confirmed = 0;\r\n      let active = 0;\r\n      let recoveries = 0;\r\n      let deaths = 0;\r\n      let deltas = {};\r\n      data.forEach((state, index) => {\r\n        if (index !== 0) {\r\n          confirmed += parseInt(state.confirmed);\r\n          active += parseInt(state.active);\r\n          recoveries += parseInt(state.recovered);\r\n          deaths += parseInt(state.deaths);\r\n        } else {\r\n          deltas = {\r\n            confirmed: parseInt(state.deltaconfirmed),\r\n            deaths: parseInt(state.deltadeaths),\r\n            recovered: parseInt(state.deltarecovered),\r\n          };\r\n        }\r\n      });\r\n      setConfirmed(confirmed);\r\n      setActive(active);\r\n      setRecoveries(recoveries);\r\n      setDeaths(deaths);\r\n      setDeltas(deltas);\r\n    };\r\n    parseData();\r\n  }, [data]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      \r\n<div className=\"card-container\">\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}> \r\n  <h3 className=\"card-title is-cherry\" style={{color:\"#ff073a\"}}>Confirmed</h3>\r\n  <div className=\"bar \">\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <div id=\"name\" style={{color:\"#ff073a\"}}>\r\n    \r\n        <h1 className=\"title\">{confirmed} </h1>\r\n    </div>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title\" style={{color:\"#007bff\"}}>ACTIVE</h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <div id=\"name\" style={{color:'#007bff'}}>\r\n    <h1 className=\"title has-text-info\">{active}</h1>\r\n    </div>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title\" style={{color:\"#28a745\"}}>RECOVERED </h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <div id=\"name\" style={{color:'#28a745'}}>\r\n        <h1 className=\"title has-text-success\">{recoveries} </h1>\r\n    </div>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title is-gray\" style={{color:\"#6c757d\"}}>DECEASED</h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  \r\n  <div className=\"card-circle\">\r\n    <div id=\"name\" style={{color:'#6c757d'}}>\r\n    \r\n        <h1 className=\"title has-text-grey\">{deaths}</h1>\r\n    </div>\r\n    \r\n  </div>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n</React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StateWiseLevel;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nfunction Level(props) {\r\n  const [data, setData] = useState(props.data);\r\n  const [confirmed, setConfirmed] = useState(0);\r\n  const [active, setActive] = useState(0);\r\n  const [recoveries, setRecoveries] = useState(0);\r\n  const [deaths, setDeaths] = useState(0);\r\n  const [deltas, setDeltas] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setData(props.data);\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    const parseData = () => {\r\n      let confirmed = 0;\r\n      let active = 0;\r\n      let recoveries = 0;\r\n      let deaths = 0;\r\n      let deltas = {};\r\n      data.forEach((state, index) => {\r\n        if (index !== 0) {\r\n          confirmed += parseInt(state.confirmed);\r\n          active += parseInt(state.active);\r\n          recoveries += parseInt(state.recovered);\r\n          deaths += parseInt(state.deaths);\r\n        } else {\r\n          deltas = {\r\n            confirmed: parseInt(state.deltaconfirmed),\r\n            deaths: parseInt(state.deltadeaths),\r\n            recovered: parseInt(state.deltarecovered),\r\n          };\r\n        }\r\n      });\r\n      setConfirmed(confirmed);\r\n      setActive(active);\r\n      setRecoveries(recoveries);\r\n      setDeaths(deaths);\r\n      setDeltas(deltas);\r\n    };\r\n    parseData();\r\n  }, [data]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      \r\n<div className=\"card-container\">\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}> \r\n  <h3 className=\"card-title is-cherry\" style={{color:\"#ff073a\"}}>Confirmed</h3>\r\n  <div className=\"bar \">\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <p id=\"name\" style={{color:\"#ff073a\"}}>\r\n    \r\n        <h1 className=\"title\">{confirmed} </h1>\r\n    </p>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title\" style={{color:\"#007bff\"}}>ACTIVE</h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <p id=\"name\" style={{color:'#007bff'}}>\r\n    <h1 className=\"title has-text-info\">{active}</h1>\r\n    </p>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title\" style={{color:\"#28a745\"}}>RECOVERED </h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  <div className=\"card-circle\">\r\n    <p id=\"name\" style={{color:'#28a745'}}>\r\n        <h1 className=\"title has-text-success\">{recoveries} </h1>\r\n    </p>\r\n    \r\n  </div>\r\n</div>\r\n<div className=\"cardStyle fadeInUp\" style={{animationDelay: '1s'}}>\r\n  <h3 className=\"card-title is-gray\" style={{color:\"#6c757d\"}}>DECEASED</h3>\r\n  <div className=\"bar\">\r\n    <div className=\"emptybar\"></div>\r\n    <div className=\"filledbar\"></div>\r\n  </div>\r\n  \r\n  <div className=\"card-circle\">\r\n    <p id=\"name\" style={{color:'#6c757d'}}>\r\n    \r\n        <h1 className=\"title has-text-grey\">{deaths}</h1>\r\n    </p>\r\n    \r\n  </div>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n</React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Level;\r\n","export const MAP_TYPES = {\r\n  COUNTRY: 'country',\r\n  STATE: 'state',\r\n};\r\n\r\nexport const MAPS_DIR = '/maps';\r\n","import React, {useCallback, useEffect, useRef, useState} from 'react';\r\nimport * as d3 from 'd3';\r\nimport {legendColor} from 'd3-svg-legend';\r\nimport * as topojson from 'topojson';\r\nimport {MAP_TYPES} from '../constants';\r\n\r\nconst propertyFieldMap = {\r\n  country: 'st_nm',\r\n  state: 'district',\r\n};\r\n\r\nfunction ChoroplethMap({\r\n  statistic,\r\n  mapData,\r\n  setHoveredRegion,\r\n  mapMeta,\r\n  changeMap,\r\n  selectedRegion,\r\n}) {\r\n  const choroplethMap = useRef(null);\r\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\r\n\r\n  const ready = useCallback(\r\n    (geoData) => {\r\n      d3.selectAll('svg#chart > *').remove();\r\n      const propertyField = propertyFieldMap[mapMeta.mapType];\r\n      const maxInterpolation = 0.8;\r\n      const svg = d3.select(choroplethMap.current);\r\n      const width = +svg.attr('width');\r\n      const height = +svg.attr('height');\r\n\r\n      const handleMouseover = (name) => {\r\n        try {\r\n          setHoveredRegion(name, mapMeta);\r\n        } catch (err) {\r\n          console.log('err', err);\r\n        }\r\n      };\r\n\r\n      const topology = topojson.feature(\r\n        geoData,\r\n        geoData.objects[mapMeta.graphObjectName]\r\n      );\r\n\r\n      const projection = d3.geoMercator();\r\n\r\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY)\r\n        projection.fitSize([width, height], topology);\r\n      else\r\n        projection.fitExtent(\r\n          [\r\n            [90, 20],\r\n            [width, height],\r\n          ],\r\n          topology\r\n        );\r\n\r\n      const path = d3.geoPath(projection);\r\n\r\n      let onceTouchedRegion = null;\r\n\r\n      svg\r\n        .append('g')\r\n        .attr('class', 'states')\r\n        .selectAll('path')\r\n        .data(topology.features)\r\n        .enter()\r\n        .append('path')\r\n        .attr('class', 'path-region')\r\n        .attr('fill', function (d) {\r\n          const n = parseInt(mapData[d.properties[propertyField]]) || 0;\r\n          const color =\r\n            n === 0\r\n              ? '#ffffff'\r\n              : d3.interpolateGreys(\r\n                  (maxInterpolation * n) / (statistic.maxConfirmed || 0.001)\r\n                );\r\n          return color;\r\n        })\r\n        .attr('d', path)\r\n        .attr('pointer-events', 'all')\r\n        .on('mouseover', (d) => {\r\n          handleMouseover(d.properties[propertyField]);\r\n          const target = d3.event.target;\r\n          d3.select(target.parentNode.appendChild(target)).attr(\r\n            'class',\r\n            'map-hover'\r\n          );\r\n        })\r\n        .on('mouseleave', (d) => {\r\n          const target = d3.event.target;\r\n          d3.select(target).attr('class', 'path-region map-default');\r\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\r\n        })\r\n        .on('touchstart', (d) => {\r\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\r\n          else onceTouchedRegion = d;\r\n        })\r\n        .on('click', (d) => {\r\n          if (onceTouchedRegion) {\r\n            return;\r\n          }\r\n          if (mapMeta.mapType === MAP_TYPES.STATE) {\r\n            return;\r\n          }\r\n          changeMap(d.properties[propertyField], mapMeta.mapType);\r\n        })\r\n        .style('cursor', 'pointer')\r\n        .append('title')\r\n        .text(function (d) {\r\n          const value = mapData[d.properties[propertyField]] || 0;\r\n          return (\r\n            Number(\r\n              parseFloat(100 * (value / (statistic.total || 0.001))).toFixed(2)\r\n            ).toString() +\r\n            '% from ' +\r\n            toTitleCase(d.properties[propertyField])\r\n          );\r\n        });\r\n\r\n      svg\r\n        .append('path')\r\n        .attr('stroke', '#ff073a20')\r\n        .attr('fill', 'none')\r\n        .attr('stroke-width', 2)\r\n        .attr(\r\n          'd',\r\n          path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName]))\r\n        );\r\n    },\r\n    [\r\n      mapData,\r\n      mapMeta,\r\n      statistic.total,\r\n      statistic.maxConfirmed,\r\n      changeMap,\r\n      setHoveredRegion,\r\n    ]\r\n  );\r\n\r\n  const toTitleCase = (str) => {\r\n    str = str.toLowerCase().split(' ');\r\n    for (let i = 0; i < str.length; i++) {\r\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\r\n    }\r\n    return str.join(' ');\r\n  };\r\n\r\n  const renderData = useCallback(() => {\r\n    const svg = d3.select(choroplethMap.current);\r\n\r\n    // Colorbar\r\n    const maxInterpolation = 0.8;\r\n    const color = d3\r\n      .scaleSequential(d3.interpolateGreys)\r\n      .domain([0, statistic.maxConfirmed / maxInterpolation || 10]);\r\n\r\n    let cells = null;\r\n    let label = null;\r\n\r\n    label = ({i, genLength, generatedLabels, labelDelimiter}) => {\r\n      if (i === genLength - 1) {\r\n        const n = Math.floor(generatedLabels[i]);\r\n        return `${n}+`;\r\n      } else {\r\n        const n1 = 1 + Math.floor(generatedLabels[i]);\r\n        const n2 = Math.floor(generatedLabels[i + 1]);\r\n        return `${n1} - ${n2}`;\r\n      }\r\n    };\r\n\r\n    const numCells = 6;\r\n    const delta = Math.floor(\r\n      (statistic.maxConfirmed < numCells ? numCells : statistic.maxConfirmed) /\r\n        (numCells - 1)\r\n    );\r\n\r\n    cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\r\n\r\n    svg\r\n      .append('g')\r\n      .attr('class', 'legendLinear')\r\n      .attr('transform', 'translate(1, 335)');\r\n\r\n    const legendLinear = legendColor()\r\n      .shapeWidth(36)\r\n      .shapeHeight(10)\r\n      .cells(cells)\r\n      .titleWidth(3)\r\n      .labels(label)\r\n      .title('Confirmed Cases')\r\n      .orient('vertical')\r\n      .scale(color);\r\n\r\n    svg\r\n      .select('.legendLinear')\r\n      .call(legendLinear)\r\n      .selectAll('text')\r\n      .style('font-size', '10px');\r\n  }, [statistic.maxConfirmed]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const data = await d3.json(mapMeta.geoDataFile);\r\n      if (statistic && choroplethMap.current) {\r\n        ready(data);\r\n        renderData();\r\n        setSvgRenderCount((prevCount) => prevCount + 1);\r\n      }\r\n    })();\r\n  }, [mapMeta.geoDataFile, statistic, renderData, ready]);\r\n\r\n  const highlightRegionInMap = (name) => {\r\n    const paths = d3.selectAll('.path-region');\r\n    paths.classed('map-hover', (d, i, nodes) => {\r\n      const propertyField =\r\n        'district' in d.properties\r\n          ? propertyFieldMap['state']\r\n          : propertyFieldMap['country'];\r\n      if (name === d.properties[propertyField]) {\r\n        nodes[i].parentNode.appendChild(nodes[i]);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    highlightRegionInMap(selectedRegion);\r\n  }, [svgRenderCount, selectedRegion]);\r\n\r\n  return (\r\n    <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\r\n      <svg\r\n        id=\"chart\"\r\n        width=\"480\"\r\n        height=\"450\"\r\n        viewBox=\"0 0 480 450\"\r\n        preserveAspectRatio=\"xMidYMid meet\"\r\n        ref={choroplethMap}\r\n      ></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChoroplethMap;\r\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\r\nimport ChoroplethMap from './choropleth';\r\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\r\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\r\nimport {formatDistance} from 'date-fns';\r\n\r\nconst mapMeta = {\r\n  India: {\r\n    name: 'India',\r\n    geoDataFile: `${MAPS_DIR}/india.json`,\r\n    mapType: MAP_TYPES.COUNTRY,\r\n    graphObjectName: 'india',\r\n  },\r\n  'Andaman and Nicobar Islands': {\r\n    name: 'Andaman and Nicobar Islands',\r\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'andamannicobarislands_district',\r\n  },\r\n  'Arunachal Pradesh': {\r\n    name: 'Arunachal Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'arunachalpradesh_district',\r\n  },\r\n  'Andhra Pradesh': {\r\n    name: 'Andhra Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'andhrapradesh_district',\r\n  },\r\n\r\n  Assam: {\r\n    name: 'Assam',\r\n    geoDataFile: `${MAPS_DIR}/assam.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'assam_district',\r\n  },\r\n  Bihar: {\r\n    name: 'Bihar',\r\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'bihar_district',\r\n  },\r\n  Chhattisgarh: {\r\n    name: 'Chhattisgarh',\r\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'chhattisgarh_district',\r\n  },\r\n  Delhi: {\r\n    name: 'Delhi',\r\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'delhi_district',\r\n  },\r\n  Karnataka: {\r\n    name: 'Karnataka',\r\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'karnataka_district',\r\n  },\r\n  Kerala: {\r\n    name: 'Kerala',\r\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'kerala_district',\r\n  },\r\n  Goa: {\r\n    name: 'Goa',\r\n    geoDataFile: `${MAPS_DIR}/goa.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'goa_district',\r\n  },\r\n  Gujarat: {\r\n    name: 'Gujarat',\r\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'gujarat_district',\r\n  },\r\n  Haryana: {\r\n    name: 'Haryana',\r\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'haryana_district',\r\n  },\r\n  'Himachal Pradesh': {\r\n    name: 'Himachal Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'himachalpradesh_district',\r\n  },\r\n  'Jammu and Kashmir': {\r\n    name: 'Jammu and Kashmir',\r\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'jammukashmir_district',\r\n  },\r\n  Jharkhand: {\r\n    name: 'Jharkhand',\r\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'jharkhand_district',\r\n  },\r\n  Ladakh: {\r\n    name: 'Ladakh',\r\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'ladakh_district',\r\n  },\r\n  'Madhya Pradesh': {\r\n    name: 'Madhya Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'madhyapradesh_district',\r\n  },\r\n  Maharashtra: {\r\n    name: 'Maharashtra',\r\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'maharashtra_district',\r\n  },\r\n  Manipur: {\r\n    name: 'Manipur',\r\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'manipur_district',\r\n  },\r\n  Meghalaya: {\r\n    name: 'Meghalaya',\r\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'meghalaya_district',\r\n  },\r\n  Mizoram: {\r\n    name: 'Mizoram',\r\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'mizoram_district',\r\n  },\r\n  Nagaland: {\r\n    name: 'Nagaland',\r\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'nagaland_district',\r\n  },\r\n  Odisha: {\r\n    name: 'Odisha',\r\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'odisha_district',\r\n  },\r\n  Punjab: {\r\n    name: 'Punjab',\r\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'punjab_district',\r\n  },\r\n  Rajasthan: {\r\n    name: 'Rajasthan',\r\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'rajasthan_district',\r\n  },\r\n  Sikkim: {\r\n    name: 'Sikkim',\r\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'sikkim_district',\r\n  },\r\n  'Tamil Nadu': {\r\n    name: 'Tamil Nadu',\r\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'tamilnadu_district',\r\n  },\r\n  Telangana: {\r\n    name: 'Telangana',\r\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'telangana_district',\r\n  },\r\n  Tripura: {\r\n    name: 'Tripura',\r\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'tripura_district',\r\n  },\r\n  Uttarakhand: {\r\n    name: 'Uttarakhand',\r\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'uttarakhand_district',\r\n  },\r\n  'Uttar Pradesh': {\r\n    name: 'Uttar Pradesh',\r\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'uttarpradesh_district',\r\n  },\r\n\r\n  'West Bengal': {\r\n    name: 'West Bengal',\r\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\r\n    mapType: MAP_TYPES.STATE,\r\n    graphObjectName: 'westbengal_district',\r\n  },\r\n};\r\n\r\nexport default function ({states, stateDistrictWiseData, regionHighlighted}) {\r\n\r\n  // console.log('props',stateDistrictWiseData)\r\n  const [selectedRegion, setSelectedRegion] = useState({});\r\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\r\n  const [currentMap, setCurrentMap] = useState(mapMeta['Tamil Nadu']);\r\n\r\n  useEffect(() => {\r\n    const region = getRegionFromState(states[1]);\r\n    setCurrentHoveredRegion(region);\r\n  }, [states]);\r\n\r\n  if (!currentHoveredRegion) {\r\n    console.log(currentHoveredRegion)\r\n    return null;\r\n  }\r\n\r\n  const [statistic, currentMapData] = useMemo(() => {\r\n    const statistic = {total: 0, maxConfirmed: 0};\r\n    let currentMapData = {};\r\n\r\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\r\n      currentMapData = states.reduce((acc, state) => {\r\n        if (state.state === 'Total') {\r\n          return acc;\r\n        }\r\n        const confirmed = parseInt(state.confirmed);\r\n        statistic.total += confirmed;\r\n        if (confirmed > statistic.maxConfirmed) {\r\n          statistic.maxConfirmed = confirmed;\r\n        }\r\n\r\n        acc[state.state] = state.confirmed;\r\n        return acc;\r\n      }, {});\r\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\r\n      const districtWiseData = (\r\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\r\n      ).districtData;\r\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\r\n        const confirmed = parseInt(districtWiseData[district].confirmed);\r\n        statistic.total += confirmed;\r\n        if (confirmed > statistic.maxConfirmed) {\r\n          statistic.maxConfirmed = confirmed;\r\n        }\r\n        acc[district] = districtWiseData[district].confirmed;\r\n        return acc;\r\n      }, {});\r\n    }\r\n    return [statistic, currentMapData];\r\n  }, [currentMap, states, stateDistrictWiseData]);\r\n\r\n  const setHoveredRegion = useCallback(\r\n    (name, currentMap) => {\r\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\r\n        setCurrentHoveredRegion(\r\n          getRegionFromState(states.filter((state) => name === state.state)[0])\r\n        );\r\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\r\n        const state = stateDistrictWiseData[currentMap.name] || {\r\n          districtData: {},\r\n        };\r\n        let districtData = state.districtData[name];\r\n        if (!districtData) {\r\n          districtData = {\r\n            confirmed: 0,\r\n            active: 0,\r\n            deaths: 0,\r\n            recovered: 0,\r\n          };\r\n        }\r\n        setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\r\n      }\r\n    },\r\n    [stateDistrictWiseData, states]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (regionHighlighted === undefined) {\r\n      return;\r\n    } else if (regionHighlighted === null) {\r\n      setSelectedRegion(null);\r\n      return;\r\n    }\r\n    const isState = !('district' in regionHighlighted);\r\n    if (isState) {\r\n      const newMap = mapMeta['Tamil Nadu'];\r\n      setCurrentMap(newMap);\r\n      const region = getRegionFromState(regionHighlighted.state);\r\n      setCurrentHoveredRegion(region);\r\n      setSelectedRegion(region.name);\r\n    } else {\r\n      const newMap = mapMeta[regionHighlighted.state.state];\r\n      if (!newMap) {\r\n        return;\r\n      }\r\n      setCurrentMap(newMap);\r\n      setHoveredRegion(regionHighlighted.district, newMap);\r\n      setSelectedRegion(regionHighlighted.district);\r\n    }\r\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\r\n\r\n  const getRegionFromDistrict = (districtData, name) => {\r\n    if (!districtData) {\r\n      return;\r\n    }\r\n    const region = {...districtData};\r\n    if (!region.name) {\r\n      region.name = name;\r\n    }\r\n    return region;\r\n  };\r\n\r\n  const getRegionFromState = (state) => {\r\n    if (!state) {\r\n      return;\r\n    }\r\n    const region = {...state};\r\n    if (!region.name) {\r\n      region.name = region.state;\r\n    }\r\n    return region;\r\n  };\r\n\r\n  const switchMapToState = useCallback(\r\n    (name) => {\r\n      const newMap = mapMeta[name];\r\n      if (!newMap) {\r\n        return;\r\n      }\r\n      setCurrentMap(newMap);\r\n      if (newMap.mapType === MAP_TYPES.STATE) {\r\n        setHoveredRegion(states[1].state, newMap);\r\n      } else if (newMap.mapType === MAP_TYPES.STATE) {\r\n        const districtData = (stateDistrictWiseData[name] || {districtData: {}})\r\n          .districtData;\r\n        const topDistrict = Object.keys(districtData)\r\n          .filter((name) => name !== 'Unknown')\r\n          .sort((a, b) => {\r\n            return districtData[b].confirmed - districtData[a].confirmed;\r\n          })[0];\r\n        setHoveredRegion(topDistrict, newMap);\r\n      }\r\n    },\r\n    [setHoveredRegion, stateDistrictWiseData, states]\r\n  );\r\n  const {name, lastupdatedtime} = currentHoveredRegion;\r\n\r\n  return (\r\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.5s',marginTop:'-30px'}}>\r\n      <div className=\"header\">\r\n        <h6>\r\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\r\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/ut' : 'district'}{' '}\r\n          for more details\r\n        </h6>\r\n      </div>\r\n\r\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\r\n        <h2>{name}</h2>\r\n        {lastupdatedtime && (\r\n          <div\r\n            className={`last-update ${\r\n              currentMap.mapType === MAP_TYPES.STATE\r\n                ? 'district-last-update'\r\n                : 'state-last-update'\r\n            }`}\r\n          >\r\n            <h6>Last Updated</h6>\r\n            <h3\r\n              title={\r\n                isNaN(Date.parse(formatDate(lastupdatedtime)))\r\n                  ? ''\r\n                  : formatDateAbsolute(lastupdatedtime)\r\n              }\r\n            >\r\n              {isNaN(Date.parse(formatDate(lastupdatedtime)))\r\n                ? ''\r\n                : formatDistance(\r\n                    new Date(formatDate(lastupdatedtime)),\r\n                    new Date()\r\n                  ) + ' Ago'}\r\n            </h3>\r\n          </div>\r\n        )}\r\n\r\n        {currentMap.mapType === MAP_TYPES.STATE &&\r\n        currentMapData.Unknown > 0 ? (\r\n          <h4 className=\"unknown\">\r\n            Districts unknown for {currentMapData.Unknown} people\r\n          </h4>\r\n        ) : null}\r\n\r\n        {/* {currentMap.mapType === MAP_TYPES.STATE ? (\r\n          <div\r\n            className=\"button back-button\"\r\n            onClick={() => switchMapToState('Tamil Nadu')}\r\n          >\r\n            Back\r\n          </div>\r\n        ) : null} */}\r\n      </div>\r\n\r\n      <div className=\"map-stats\">\r\n        <div className=\"stats fadeInUp\" style={{animationDelay: '2s'}}>\r\n          <h5>Confirmed</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.confirmed}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"stats is-blue fadeInUp\"\r\n          style={{animationDelay: '2.1s'}}\r\n        >\r\n          <h5>Active</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.active || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"stats is-green fadeInUp\"\r\n          style={{animationDelay: '2.2s'}}\r\n        >\r\n          <h5>Recovered</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"stats is-gray fadeInUp\"\r\n          style={{animationDelay: '2.3s'}}\r\n        >\r\n          <h5>Deceased</h5>\r\n          <div className=\"stats-bottom\">\r\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\r\n            <h6>{}</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n\r\n      <ChoroplethMap\r\n        statistic={statistic}\r\n        mapMeta={currentMap}\r\n        mapData={currentMapData}\r\n        setHoveredRegion={setHoveredRegion}\r\n        changeMap={switchMapToState}\r\n        selectedRegion={selectedRegion}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {formatDistance, format} from 'date-fns';\r\nimport {\r\n  formatDate,\r\n  formatDateAbsolute,\r\n  validateCTS,\r\n} from '../utils/common-functions';\r\nimport * as Icon from 'react-feather';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Table from './table';\r\nimport StateWiseLevel from './stateLevel';\r\nimport Level from './level';\r\nimport MapExplorer from './mapexplorer';\r\nimport TimeSeries from './timeseries';\r\nimport Minigraph from './minigraph';\r\n\r\n\r\nfunction Home(props) {\r\n  const [selectedState,setSelectedState]=useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\r\n  /* const [patients, setPatients] = useState([]);*/\r\n  const [fetched, setFetched] = useState(false);\r\n  const [graphOption, setGraphOption] = useState(1);\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const [activityLog, setActivityLog] = useState([]);\r\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\r\n  const [timeseriesLogMode, setTimeseriesLogMode] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (fetched === false) {\r\n      getStates();\r\n    }\r\n  }, [fetched]);\r\n\r\n  const getStates = async () => {\r\n    try {\r\n      const [\r\n        response,\r\n        stateDistrictWiseResponse,\r\n        updateLogResponse,\r\n      ] = await Promise.all([\r\n        axios.get('https://api.covid19india.org/data.json'),\r\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\r\n        axios.get('https://api.covid19india.org/updatelog/log.json'),\r\n      ]);\r\n      console.log(response.data.statewise.filter(state=>state.statecode === 'TT' || state.statecode==='TN'?state:null))\r\n      setSelectedState(response.data.statewise.filter(state=>state.statecode === 'TT' || state.statecode==='TN'?state:null))\r\n      setStates(response.data.statewise);\r\n      setTimeseries(validateCTS(response.data.cases_time_series));\r\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\r\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\r\n      setActivityLog(updateLogResponse.data);\r\n      /* setPatients(rawDataResponse.data.raw_data.filter((p) => p.detectedstate));*/\r\n      setFetched(true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const onHighlightState = (state, index) => {\r\n    if (!state && !index) setRegionHighlighted(null);\r\n    else setRegionHighlighted({state, index});\r\n  };\r\n  const onHighlightDistrict = (district, state, index) => {\r\n    if (!state && !index && !district) setRegionHighlighted(null);\r\n    else setRegionHighlighted({district, state, index});\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      \r\n          <div className=\"header main-head fadeInUp\" style={{animationDelay: '1s'}}>\r\n            <div className=\"header-mid\">\r\n              <div className=\"titles\">\r\n                <h1>COVID-19 Tracker - India</h1>\r\n              </div>\r\n              <div className=\"last-update\">\r\n                <h6>Last Updated</h6>\r\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                    ? ''\r\n                    : formatDistance(\r\n                        new Date(formatDate(lastUpdated)),\r\n                        new Date()\r\n                      ) + ' Ago'}\r\n                </h6>\r\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                    ? ''\r\n                    : formatDateAbsolute(lastUpdated)}\r\n                </h6>\r\n              </div>\r\n            </div>\r\n          </div>\r\n  \r\n        <div className=\"card-design\">\r\n        {states.length > 1 && <Level data={states} />}\r\n        </div>\r\n\r\n          \r\n      <div className=\"Container\">\r\n          <div className=\"map_section\">\r\n      {fetched && (\r\n            <React.Fragment>\r\n              <MapExplorer\r\n                states={states}\r\n                stateDistrictWiseData={stateDistrictWiseData}\r\n                regionHighlighted={regionHighlighted}\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n\r\n          {/* <Minigraph timeseries={timeseries} animate={true} /> */}\r\n          </div>\r\n        <div className=\"table-section\">\r\n        <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1.5s'}}>\r\n        Compiled from State Govt.\r\n      </h5>\r\n    \r\n    <Table\r\n            states={states}\r\n            selectedState={selectedState}\r\n            summary={false}\r\n            stateDistrictWiseData={stateDistrictWiseData}\r\n            onHighlightState={onHighlightState}\r\n            onHighlightDistrict={onHighlightDistrict}\r\n          />\r\n         </div>\r\n\r\n        \r\n          </div>        \r\n  \r\n         \r\n    \r\n  \r\n         \r\n          \r\n        \r\n        \r\n        \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Row from './row';\r\n\r\nfunction StateWiseTable(props) {\r\n  const [states, setStates] = useState(props.states);\r\n  const [revealedStates, setRevealedStates] = useState({});\r\n  const [districts, setDistricts] = useState({});\r\n  const [count, setCount] = useState(0);\r\n  const [sortData, setSortData] = useState({\r\n    sortColumn: localStorage.getItem('state.sortColumn')\r\n      ? localStorage.getItem('state.sortColumn')\r\n      : 'confirmed',\r\n    isAscending: localStorage.getItem('state.isAscending')\r\n      ? localStorage.getItem('state.isAscending') === 'true'\r\n      : false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.summary === true) {\r\n      \r\n      setStates(props.states.slice(0, 9));\r\n    } else {\r\n      setStates(props.states);\r\n    }\r\n  }, [props.states, props.summary]);\r\n\r\n  useEffect(() => {\r\n    if (props.states[0]) {\r\n      setRevealedStates(\r\n        props.states.reduce((a, state) => {\r\n          return {...a, [state.state]: false};\r\n        }, {})\r\n      );\r\n    }\r\n  }, [props.states]);\r\n\r\n  useEffect(() => {\r\n    if (states.length > 0) {\r\n      // slice to ignore the first item which is the total count\r\n      setCount(states.slice(1).filter((s) => s && s.confirmed > 0).length);\r\n    }\r\n  }, [states]);\r\n\r\n  useEffect(() => {\r\n    setDistricts(props.stateDistrictWiseData);\r\n  }, [props.stateDistrictWiseData]);\r\n\r\n  const doSort = (e, props) => {\r\n    const totalRow = states.splice(0, 1);\r\n    states.sort((StateData1, StateData2) => {\r\n      const sortColumn = sortData.sortColumn;\r\n      let value1 = StateData1[sortColumn];\r\n      let value2 = StateData2[sortColumn];\r\n\r\n      if (sortColumn !== 'state') {\r\n        value1 = parseInt(StateData1[sortColumn]);\r\n        value2 = parseInt(StateData2[sortColumn]);\r\n      }\r\n\r\n      if (sortData.isAscending) {\r\n        return value1 > value2\r\n          ? 1\r\n          : value1 === value2 && StateData1['state'] > StateData2['state']\r\n          ? 1\r\n          : -1;\r\n      } else {\r\n        return value1 < value2\r\n          ? 1\r\n          : value1 === value2 && StateData1['state'] > StateData2['state']\r\n          ? 1\r\n          : -1;\r\n      }\r\n    });\r\n    states.unshift(totalRow[0]);\r\n  };\r\n\r\n  const handleSort = (e, props) => {\r\n    const currentsortColumn = e.currentTarget\r\n      .querySelector('abbr')\r\n      .getAttribute('title')\r\n      .toLowerCase();\r\n    const isAscending =\r\n      sortData.sortColumn === currentsortColumn\r\n        ? !sortData.isAscending\r\n        : sortData.sortColumn === 'state';\r\n    setSortData({\r\n      sortColumn: currentsortColumn,\r\n      isAscending: isAscending,\r\n    });\r\n    localStorage.setItem('state.sortColumn', currentsortColumn);\r\n    localStorage.setItem('state.isAscending', isAscending);\r\n  };\r\n\r\n  const handleReveal = (state) => {\r\n    setRevealedStates({\r\n      ...revealedStates,\r\n      [state]: !revealedStates[state],\r\n    });\r\n  };\r\n\r\n  doSort();\r\n\r\n  return (\r\n    <React.Fragment>\r\n         \r\n      <table className=\"table fadeInUp\" style={{animationDelay: '1.8s',width:'100%'}}>\r\n      \r\n        <thead>\r\n          <tr>\r\n            <th\r\n              className=\"sticky state-heading\"\r\n              onClick={(e) => handleSort(e, props)}\r\n            >\r\n              <div className=\"heading-content\">\r\n                <abbr title=\"State\">State/UT</abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'state' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\r\n                  title=\"Confirmed\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'C'\r\n                      : 'Cnfmd'\r\n                    : 'Confirmed'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-blue' : ''}`}\r\n                  title=\"Active\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'A'\r\n                      : 'Actv'\r\n                    : 'Active'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'active' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-green' : ''}`}\r\n                  title=\"Recovered\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'R'\r\n                      : 'Rcvrd'\r\n                    : 'Recovered'}\r\n                </abbr>\r\n                <div\r\n                  className={\r\n                    sortData.sortColumn === 'recovered' ? 'sort-black' : ''\r\n                  }\r\n                ></div>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'recovered' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th className=\"sticky\" onClick={(e) => handleSort(e, props)}>\r\n              <div className=\"heading-content\">\r\n                <abbr\r\n                  className={`${window.innerWidth <= 769 ? 'is-gray' : ''}`}\r\n                  title=\"Deaths\"\r\n                >\r\n                  {window.innerWidth <= 769\r\n                    ? window.innerWidth <= 375\r\n                      ? 'D'\r\n                      : 'Dcsd'\r\n                    : 'Deceased'}\r\n                </abbr>\r\n                <div\r\n                  style={{\r\n                    display:\r\n                      sortData.sortColumn === 'deaths' ? 'initial' : 'none',\r\n                  }}\r\n                >\r\n                  {sortData.isAscending ? (\r\n                    <div className=\"arrow-up\" />\r\n                  ) : (\r\n                    <div className=\"arrow-down\" />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {states.map((state, index) => {\r\n            if (index !== 0 && state.confirmed > 0) {\r\n              return (\r\n                <Row\r\n                  key={index}\r\n                  index={index}\r\n                  state={state}\r\n                  total={false}\r\n                  reveal={revealedStates[state.state]}\r\n                  districts={\r\n                    state.state in districts\r\n                      ? districts[state.state].districtData\r\n                      : []\r\n                  }\r\n                  onHighlightState={props.onHighlightState}\r\n                  onHighlightDistrict={props.onHighlightDistrict}\r\n                  handleReveal={handleReveal}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </tbody>\r\n\r\n        <tbody>\r\n          {states.length > 1 && props.summary === false && (\r\n            <Row key={0} state={states[0]} total={true} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\r\n        {count} States/UTS Affected\r\n      </h5>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StateWiseTable;\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport {formatDistance, format} from 'date-fns';\r\nimport {\r\n  formatDate,\r\n  formatDateAbsolute,\r\n  validateCTS,\r\n} from '../utils/common-functions';\r\nimport * as Icon from 'react-feather';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// import Table from './table';\r\nimport StateWiseTable from './stateTable';\r\nimport StateWiseLevel from './stateLevel';\r\n// import Level from './level';\r\nimport MapExplorer from './mapexplorer';\r\nimport TimeSeries from './timeseries';\r\nimport Minigraph from './minigraph';\r\n\r\n\r\nfunction StateWisePage(props) {\r\n  const [selectedState,setSelectedState]=useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\r\n  /* const [patients, setPatients] = useState([]);*/\r\n  const [fetched, setFetched] = useState(false);\r\n  const [graphOption, setGraphOption] = useState(1);\r\n  const [lastUpdated, setLastUpdated] = useState('');\r\n  const [timeseries, setTimeseries] = useState([]);\r\n  const [activityLog, setActivityLog] = useState([]);\r\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\r\n  const [timeseriesLogMode, setTimeseriesLogMode] = useState(false);\r\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (fetched === false) {\r\n      getStates();\r\n    }\r\n  }, [fetched]);\r\n\r\n  const getStates = async () => {\r\n    try {\r\n      const [\r\n        response,\r\n        stateDistrictWiseResponse,\r\n        updateLogResponse,\r\n      ] = await Promise.all([\r\n        axios.get('https://api.covid19india.org/data.json'),\r\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\r\n        axios.get('https://api.covid19india.org/updatelog/log.json'),\r\n      ]);\r\n      setSelectedState(response.data.statewise.filter(state=>state.statecode === 'TT' || state.statecode==='TN'?state:null))\r\n      setStates(response.data.statewise);\r\n      setTimeseries(validateCTS(response.data.cases_time_series));\r\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\r\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\r\n      setActivityLog(updateLogResponse.data);\r\n      /* setPatients(rawDataResponse.data.raw_data.filter((p) => p.detectedstate));*/\r\n      setFetched(true);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const onHighlightState = (state, index) => {\r\n    if (!state && !index) setRegionHighlighted(null);\r\n    else setRegionHighlighted({state, index});\r\n  };\r\n  const onHighlightDistrict = (district, state, index) => {\r\n    if (!state && !index && !district) setRegionHighlighted(null);\r\n    else setRegionHighlighted({district, state, index});\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      \r\n          <div className=\"header main-head fadeInUp\" style={{animationDelay: '1s'}}>\r\n            <div className=\"header-mid\">\r\n              <div className=\"titles\">\r\n                <h1>COVID-19 Tracker - India</h1>\r\n              </div>\r\n              <div className=\"last-update\">\r\n                <h6>Last Updated</h6>\r\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                    ? ''\r\n                    : formatDistance(\r\n                        new Date(formatDate(lastUpdated)),\r\n                        new Date()\r\n                      ) + ' Ago'}\r\n                </h6>\r\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\r\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\r\n                    ? ''\r\n                    : formatDateAbsolute(lastUpdated)}\r\n                </h6>\r\n              </div>\r\n            </div>\r\n          </div>\r\n  \r\n        <div className=\"card-design\">\r\n        {selectedState.length > 1 && <StateWiseLevel data={selectedState} />}\r\n        </div>\r\n\r\n          \r\n      <div className=\"Container\">\r\n          <div className=\"map_section\">\r\n      {fetched && (\r\n            <React.Fragment>\r\n              <MapExplorer\r\n                states={selectedState}\r\n                stateDistrictWiseData={stateDistrictWiseData}\r\n                regionHighlighted={regionHighlighted}\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n\r\n          {/* <Minigraph timeseries={timeseries} animate={true} /> */}\r\n          </div>\r\n        <div className=\"table-section\">\r\n        <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1.5s'}}>\r\n        Compiled from State Govt.\r\n      </h5>\r\n    \r\n    <StateWiseTable\r\n            states={selectedState}\r\n            selectedState={selectedState}\r\n            summary={false}\r\n            stateDistrictWiseData={stateDistrictWiseData}\r\n            onHighlightState={onHighlightState}\r\n            onHighlightDistrict={onHighlightDistrict}\r\n          />\r\n         </div>\r\n\r\n        \r\n          </div>        \r\n  \r\n         \r\n    \r\n  \r\n         \r\n          \r\n        \r\n        \r\n        \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default StateWisePage;\r\n","import React from 'react';\r\n\r\nimport './App.scss';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport * as Icon from 'react-feather';\r\nimport Navbar from './components/navbar';\r\nimport Home from './components/home';\r\nimport StateWiseComponent from './components/StateWisePage';\r\nconst history = require('history').createBrowserHistory;\r\n\r\n\r\nfunction App() {\r\n  const pages = [\r\n    {\r\n      pageLink: '/',\r\n      view: Home,\r\n      displayName: 'Home',\r\n      animationDelayForNavbar: 0.2,\r\n    },\r\n    {\r\n      pageLink: '/TN',\r\n      view: StateWiseComponent,\r\n      displayName: 'State',\r\n      animationDelayForNavbar: 0.3,\r\n    },\r\n  ];\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      \r\n      \r\n    \r\n    <Router history={history}>\r\n        <Route\r\n          render={({location}) => (\r\n            <div className=\"App\">\r\n              {/* <Navbar pages={pages} /> */}\r\n              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\r\n              <Switch location={location}>\r\n                {pages.map((page, i) => {\r\n                  return (\r\n                    <Route\r\n                      exact\r\n                      path={page.pageLink}\r\n                      component={page.view}\r\n                      key={i}\r\n                    />\r\n                  );\r\n                })}\r\n                <Redirect to=\"/\" />\r\n              </Switch>\r\n            </div>\r\n          )}\r\n        />\r\n      </Router>\r\n    \r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}